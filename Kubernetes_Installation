#!/bin/sh
# This script will help set up Kubernetes using Kubeadm In AWS EC2 Ubuntu Servers
# You will need a minimum of 3 servers (1 manager and 2 workers)
# The manager will require t2.medium, while the workers will require a minimum of 2GB RAM
# You will need to open certain required ports. For our exercise, we will open "all trafic".


# Turn off Swap Space
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# Update the apt package index and install packages, Kubernetes and containerd:
sudo apt update -y
sudo apt install -y apt-transport-https -y

sudo curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

sudo cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
   

sudo apt update -y

echo "Installing kubelet, kubeadm, containerd, and kubectl..."
sudo apt install -y kubelet kubeadm containerd kubectl
  
echo "Setting apt-mark hold to prevent the package from being automatically upgraded or removed..."
sudo apt-mark hold kubelet kubeadm kubectl containerd

# Load the necessary modules for Containerd:

sudo cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

# Set up the required kernel parameters
echo "Setting up required sysctl params... These persist across reboots."

sudo cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF
    
# Apply sysctl params without reboot	
sudo sysctl --system

# Configure containerd
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd

# Start and enable the kubelet service
sudo systemctl daemon-reload 
sudo systemctl start kubelet 
sudo systemctl enable kubelet.service


<<TheseWillApplyOnlyToTheManagerNode
# Fetch images before cluster initialization
sudo kubeadm config images pull

# Initialize Kubernetes manager in the manager node
# You may add the following flag while initializing: --ignore-preflight-errors Swap
sudo kubeadm init 

# IP address could be public (not recommended) or elastic IP address while 6443 represents the API Server Port.
# To initialize Kubernetes on a public endpoint, remove the # to activate the command below (update the IP address accordingly):
# kubeadm init --control-plane-endpoint "enterIPAddressHere:6443"

# If error occurs, remove the # to activate the command below:
# sudo kubeadm init --cri-socket /run/containerd/containerd.sock

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# To verify whether kubectl is working or not, run the following command:
kubectl get pods -o wide --all-namespaces

# From the foregoing, all but ‘coredns’ pod should be running. To resolve this, install the Weaveworks OR Calico Network Plugin for Pod Networking
kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
# kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

kubectl get nodes
kubectl get pods --all-namespaces

# Get token
kubeadm token create --print-join-command

TheseWillApplyOnlyToTheManagerNode


### Note for Next Steps
#1. To add worker nodes to the manager node, copy the kubeadm join token from the manager node and execute (using sudo) in all the worker nodes to create a cluster
#2. kubectl commands have to be executed in manager node/controller plane.
#3. To check nodes, run "kubectl get nodes"
#4. To deploy a sample application. run "kubectl run nginx-demo --image=nginx --port=80"
#5. To create a Service object that exposes the pod, run "kubectl expose pod nginx-demo --port=80 --type=NodePort"
#6. To list all services in the namespace or to get Node Port details, run "kubectl get services"
